--- speech_tools/base_class/EST_Pathname_unix.cc.orig	2001-06-18 20:15:04.000000000 +0200
+++ speech_tools/base_class/EST_Pathname_unix.cc	2006-01-17 19:14:14.867654750 +0100
@@ -89,7 +89,7 @@
     return *this;
 
   if (length() > 0)
-    return ::operator +(EST_String(*this), "/");
+    return EST_String(EST_String(*this) + "/");
   
   return "./";
 }
@@ -144,11 +144,6 @@
 EST_Pathname operator + (const char *p, const EST_Pathname addition) 
 {return EST_Pathname::append(p, addition); }
 
-EST_Pathname &operator += (EST_Pathname p, const EST_Pathname addition)
-{ p = EST_Pathname::append(p, addition); return p; }
-EST_Pathname &operator += (EST_Pathname p, const EST_String addition)
-{ p = EST_Pathname::append(p, addition); return p; }
-
 EST_Pathname EST_Pathname::append(EST_Pathname directory, EST_Pathname addition)
 {
   if (addition.is_absolute())
--- speech_tools/base_class/rateconv.cc.orig	2004-05-04 02:00:16.000000000 +0200
+++ speech_tools/base_class/rateconv.cc	2006-01-17 19:10:38.050104500 +0100
@@ -384,7 +384,8 @@
 	    }
 	    fir_stereo(inp + inoffset + inbaseidx,
 		       coep + cycctr * firlen, firlen,
-		       outp + outidx++, outp + outidx++);
+		       outp + outidx, outp + outidx + 1);
+	    outidx += 2;
 	    cycctr++;
 	    if (!(cycctr %= up))
 		inbaseidx += 2*down;
--- speech_tools/config/compilers/gcc_defaults.mak.orig	2006-01-17 15:54:48.000000000 +0100
+++ speech_tools/config/compilers/gcc_defaults.mak	2006-01-17 16:43:29.768237250 +0100
@@ -52,7 +52,7 @@
 DEBUG_LINKFLAGS = -g
 
 WARN_CCFLAGS   = -Wall
-WARN_CXXFLAGS  = -Wall
+WARN_CXXFLAGS  = -Wall -Wno-non-template-friend -Wno-deprecated
 WARN_LINKFLAGS = -Wall
 
 VERBOSE_CCFLAGS   =
--- speech_tools/include/EST_Chunk.h.orig	2004-04-30 18:56:49.000000000 +0200
+++ speech_tools/include/EST_Chunk.h	2006-01-17 19:16:49.733333250 +0100
@@ -103,6 +103,8 @@
  /*                                                                      */
  /************************************************************************/
 
+class EST_ChunkPtr;
+
 class EST_Chunk  {
   public:
     typedef  unsigned short use_counter;
@@ -142,6 +144,9 @@
     friend void tester(void);
 };
 
+void make_updatable(EST_ChunkPtr &cp, EST_Chunk::EST_chunk_size inuse);
+void make_updatable(EST_ChunkPtr &cp);
+
  /************************************************************************/
  /*                                                                      */
  /* Pointers to chunks. Initialising them and assigning them around      */
@@ -248,4 +253,8 @@
     friend void tester(void);
 };
 
+EST_ChunkPtr chunk_allocate(int bytes);
+EST_ChunkPtr chunk_allocate(int bytes, const char *initial, int initial_len);
+EST_ChunkPtr chunk_allocate(int bytes, const EST_ChunkPtr &initial, int initial_start, int initial_len);
+
 #endif
--- speech_tools/include/ling_class/EST_Item.h.orig	2004-04-30 18:56:49.000000000 +0200
+++ speech_tools/include/ling_class/EST_Item.h	2006-01-17 18:51:47.297967250 +0100
@@ -79,6 +79,9 @@
 
 */
 
+class EST_Item;
+int same_item(const EST_Item *l1,const EST_Item *l2);
+
 class EST_Item 
 {
   private:
--- speech_tools/siod/Makefile.orig	2001-04-04 13:55:32.000000000 +0200
+++ speech_tools/siod/Makefile	2006-01-18 20:24:44.390559250 +0100
@@ -69,5 +69,6 @@
 
 DEFINES  += $(IO_DEFINES)
 INCLUDES += $(IO_INCLUDES)
+CXXFLAGS += -fno-strict-aliasing
 
 
--- speech_tools/speech_class/Makefile.orig	2006-01-18 20:28:00.298802750 +0100
+++ speech_tools/speech_class/Makefile	2006-01-18 20:28:05.331117250 +0100
@@ -59,4 +59,5 @@
 
 include $(TOP)/config/common_make_rules
 
+CXXFLAGS += -fno-strict-aliasing
 
--- speech_tools/ling_class/item_feats.cc.orig	2001-04-04 13:55:32.000000000 +0200
+++ speech_tools/ling_class/item_feats.cc	2006-02-01 18:22:51.357182250 +0100
@@ -78,7 +78,7 @@
    EST_String name = EST_FeatureFunctionContext::global->get_featfunc_name(func, found);
 
    if (!found)
-	EST_error("featfunc 0x%x has no name", (int)func);
+	EST_error("featfunc 0x%p has no name", func);
 
     return name;
 }
--- speech_tools/include/EST_simplestats.h.orig	2004-04-30 18:56:49.000000000 +0200
+++ speech_tools/include/EST_simplestats.h	2006-02-01 18:56:49.596564250 +0100
@@ -60,7 +60,7 @@
 private:
     // for fast index->name
     EST_StrVector namevector;
-    int p_def_val;
+    long p_def_val;
     // for fast name->index
     EST_StringTrie nametrie;
     
@@ -80,22 +80,22 @@
 
     /// The number of members in the discrete
     const int length(void) const { return namevector.length(); }
-    /** The int assigned to the given name, if it doesn't exists p\_def\_val
+    /** The long assigned to the given name, if it doesn't exists p\_def\_val
         is returned (which is -1 by default)
     */
-    const int index(const EST_String &n) const { 
-	int *i;
-	return (((i=(int*)nametrie.lookup(n)) != NULL) ? *i : p_def_val);
+    const long index(const EST_String &n) const { 
+	long *i;
+	return (((i=(long*)nametrie.lookup(n)) != NULL) ? *i : p_def_val);
     };
 
     /// The name given the index
-    const EST_String &name(const int n) const { return namevector(n); }
+    const EST_String &name(const long n) const { return namevector(n); }
 
     /// set the default value when a name isn't found (-1 by default)
     void def_val(const EST_String &v) { p_def_val = index(v); }
     
-    /// An alternative method for getting the int form the name
-    int name(const EST_String &n) const { return index(n); };
+    /// An alternative method for getting the long form the name
+    long name(const EST_String &n) const { return index(n); };
 
     bool operator == (const EST_Discrete &d);
     bool operator != (const EST_Discrete &d);
@@ -265,17 +265,17 @@
     /// 
     double frequency(const int i) const; 
     /// Used for iterating through members of the distribution
-    int item_start() const;
+    long item_start() const;
     /// Used for iterating through members of the distribution
-    int item_next(int idx) const;
+    long item_next(long idx) const;
     /// Used for iterating through members of the distribution
-    int item_end(int idx) const;
+    long item_end(long idx) const;
     /// During iteration returns name given index 
-    const EST_String &item_name(int idx) const;
+    const EST_String &item_name(long) const;
     /// During iteration returns name and frequency given index  
-    void item_freq(int idx,EST_String &s,double &freq) const;
+    void item_freq(long,EST_String &s,double &freq) const;
     /// During iteration returns name and probability given index
-    void item_prob(int idx,EST_String &s,double &prob) const;
+    void item_prob(long,EST_String &s,double &prob) const;
 
     /// Returns discrete vocabulary of distribution
     inline const EST_Discrete *const get_discrete() const { return discrete; };
--- speech_tools/stats/EST_DProbDist.cc.orig	2004-04-30 18:56:51.000000000 +0200
+++ speech_tools/stats/EST_DProbDist.cc	2006-02-01 18:57:56.324734500 +0100
@@ -305,15 +305,15 @@
 }
 
 //  For iterating through members of a probability distribution
-int EST_DiscreteProbDistribution::item_start(void) const
+long EST_DiscreteProbDistribution::item_start(void) const
 {
     if (type == tprob_discrete)
 	return 0;
     else
-	return (int)scounts.list.head();
+	return (long)scounts.list.head();
 }
 
-int EST_DiscreteProbDistribution::item_end(int idx) const
+long EST_DiscreteProbDistribution::item_end(long idx) const
 {
     if (type == tprob_discrete)
 	return (idx >= icounts.length());
@@ -321,15 +321,15 @@
 	return ((EST_Litem *)idx == 0);
 }
 
-int EST_DiscreteProbDistribution::item_next(int idx) const
+long EST_DiscreteProbDistribution::item_next(long idx) const
 {
     if (type == tprob_discrete)
 	return ++idx;
     else
-	return (int)next((EST_Litem *)idx);
+	return (long)next((EST_Litem *)idx);
 }
 
-const EST_String &EST_DiscreteProbDistribution::item_name(int idx) const
+const EST_String &EST_DiscreteProbDistribution::item_name(long idx) const
 {
     if (type == tprob_discrete)
 	return discrete->name(idx);
@@ -337,7 +337,7 @@
 	return scounts.list((EST_Litem *)idx).k;
 }
 
-void EST_DiscreteProbDistribution::item_freq(int idx,EST_String &s,double &freq) const
+void EST_DiscreteProbDistribution::item_freq(long idx,EST_String &s,double &freq) const
 {
     if (type == tprob_discrete)
     {
@@ -351,7 +351,7 @@
     }
 }
 
-void EST_DiscreteProbDistribution::item_prob(int idx,EST_String &s,double &prob) const
+void EST_DiscreteProbDistribution::item_prob(long idx,EST_String &s,double &prob) const
 {
     if (type == tprob_discrete)
     {
